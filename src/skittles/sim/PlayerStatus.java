package skittles.sim;

public class PlayerStatus 
{
	private double[] adblTaste;
	private int[] aintInHand;
	private double dblHappiness;
	private int intColorNum;
	private int intTotalInHand;
	private int intPlayerIndex;
	private String strClassName;
	
	public PlayerStatus( int intPlayerIndex, String strClassName, int[] aintInHand, double[] adblTaste )
	{
		this.intPlayerIndex = intPlayerIndex;
		this.strClassName = strClassName;
		this.adblTaste = adblTaste;
		this.aintInHand = aintInHand;
		intTotalInHand = 0;
		for ( int intInHand : aintInHand )
		{
			intTotalInHand += intInHand;
		}
		dblHappiness = 0;
		intColorNum = adblTaste.length;
	}
	
	protected double eat( int[] aintEat )			// return the happiness generated by eating, minus is error. -n means eat n colors if n!=1 except n = 1 which means eat more than what in hand
	{
		int intEatColorNum = 0;
		double dblHappinessUp = 0;
		for ( int intColorIndex = 0; intColorIndex < intColorNum; intColorIndex ++ )
		{
			if ( aintEat[ intColorIndex ] > 0 )
			{
				intEatColorNum ++;
			}
		}
		if ( intEatColorNum != 1 )
		{
			return -intEatColorNum;				// Error: either not eating or eat more than one color
		}
		
		for ( int intColorIndex = 0; intColorIndex < intColorNum; intColorIndex ++ )
		{
			if ( aintEat[ intColorIndex ] <= aintInHand[ intColorIndex ] )
			{
				aintInHand[ intColorIndex ] -= aintEat[ intColorIndex ];
				intTotalInHand -= aintEat[ intColorIndex ];
				dblHappinessUp += adblTaste[ intColorIndex ] * Math.pow( aintEat[ intColorIndex ], 2 );
			}
			else
			{
				System.out.println( "Eat more than have" );			// Error: eat more than what you have
			}
		}
		dblHappiness += dblHappinessUp;
		return dblHappinessUp;
	}
	
	protected int getTotalInHand()
	{
		return intTotalInHand;
	}

	protected boolean checkValidOffer( Offer offToCheck )
	{
		int[] aintOffer = offToCheck.getOffer();
		int[] aintDesire = offToCheck.getDesire();
		if ( !checkEnoughInHand( aintOffer ) ) return false;
		int intSumOffer = 0;
		int intSumDesire = 0;
		for ( int intColorIndex = 0; intColorIndex < intColorNum; intColorIndex ++ )
		{
			intSumOffer += aintOffer[ intColorIndex ];
			intSumDesire += aintDesire[ intColorIndex ];
		}
		if ( intSumOffer != intSumDesire )
			return false;
		return true;
	}

	public void offerExecuted(Offer offPicked) 
	{
		// TODO Auto-generated method stub
		int[] aintOffer = offPicked.getOffer();
		int[] aintDesire = offPicked.getDesire();
		for ( int intColorIndex = 0; intColorIndex < intColorNum; intColorIndex ++ )
		{
			aintInHand[ intColorIndex ] += aintDesire[ intColorIndex ] - aintOffer[ intColorIndex ];
		}
	}
	
	public void pickedOffer( Offer offPicked )
	{
		int[] aintOffer = offPicked.getOffer();
		int[] aintDesire = offPicked.getDesire();
		for ( int intColorIndex = 0; intColorIndex < intColorNum; intColorIndex ++ )
		{
			aintInHand[ intColorIndex ] += aintOffer[ intColorIndex ] - aintDesire[ intColorIndex ];
		}
	}
	
	public int getPlayerIndex()
	{
		return intPlayerIndex;
	}
	
	public String getClassName()
	{
		return strClassName;
	}
	
	public int[] getInHand()
	{
		return aintInHand;
	}
	
	public String toString()
	{
		String strReturn = "Player #" + intPlayerIndex + ": ";
		String strInHand = "[ ";
		for ( int intColorIndex = 0; intColorIndex < intColorNum; intColorIndex ++ )
		{
			strInHand += aintInHand[ intColorIndex ] + ", ";
		}
		strReturn += strInHand.substring( 0, strInHand.length() - 2 ) + " ]";
		return strReturn;
	}

	public double getHappiness() 
	{
		return dblHappiness;
	}

	public boolean checkCanEat(int[] aintTempEat) 
	{
		boolean blnEatAtLeastOne = false;
		for ( int intColorIndex = 0; intColorIndex < intColorNum; intColorIndex ++ )
		{
			if ( aintTempEat[ intColorIndex ] > 0 )
			{
				blnEatAtLeastOne = true;
			}
			if ( aintTempEat[ intColorIndex ] > aintInHand[ intColorIndex ] || aintTempEat[ intColorIndex ] < 0 )
			{
				return false;
			}
		}
		return blnEatAtLeastOne;
	}

	public boolean checkEnoughInHand( int[] aintToUse ) 
	{
		for ( int intColorIndex = 0; intColorIndex < intColorNum; intColorIndex ++ )
		{
			if ( aintToUse[ intColorIndex ] > aintInHand[ intColorIndex ] || aintToUse[ intColorIndex ] < 0 )
			{
				return false;
			}
		}
		return true;
	}
}
